
var refresh_handler = function () {
	app.lazyLoadState = false;
	app.pageLoad();
};

// Create custom select
function setCustomSelect(selectorSelect, selectorContent, subCategory, optionID) {
	var lastSelect = 0,
		elSelect = document.querySelectorAll(selectorSelect),
		elContent = document.querySelectorAll(selectorContent),
		elSubCat = [],
		optionSelect = [],
		valueOptionSelect = [];

	for (var i = 0; i < elContent.length; i++) {
		elSubCat.push = i;
		elSubCat[i] = elContent[i].querySelectorAll(subCategory);
	}
	
	for (var i = 0; i < elSelect.length; i++) {
		optionSelect.push = i;
		optionSelect[i] = elSelect[i].querySelectorAll('option');
	}

	for (var i = 0; i < optionSelect.length; i++) {
		valueOptionSelect.push = [];
		valueOptionSelect[i] = [];
		for (var ii = 1; ii < optionSelect[i].length; ii++) {
			valueOptionSelect[i].push = ii;
			valueOptionSelect[i][ii - 1] = optionSelect[i][ii].value;
		}
	}
	
	var x, i, j, selElmnt, a, b, c;
	/*look for any elements with the class "custom-select":*/
	x = document.getElementsByClassName("custom-select");
	for (i = 0; i < x.length; i++) {
		selElmnt = x[i].getElementsByTagName("select")[0];
		/*for each element, create a new DIV that will act as the selected item:*/
		a = document.createElement("DIV");
		a.setAttribute("class", "select-selected");
		a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
		x[i].appendChild(a);
		/*for each element, create a new DIV that will contain the option list:*/
		b = document.createElement("DIV");
		b.setAttribute("class", "select-items select-hide");
		for (j = 1; j < selElmnt.length; j++) {
			/*for each option in the original select element,
			create a new DIV that will act as an option item:*/
			c = document.createElement("DIV");
			c.innerHTML = selElmnt.options[j].innerHTML;
			c.addEventListener("click", function(e) {
				/*when an item is clicked, update the original select box,
				and the selected item:*/
				var y, i, k, s, h, valueSelect, indexInner;
				s = this.parentNode.parentNode.getElementsByTagName("select")[0];
				h = this.parentNode.previousSibling;
				for (i = 0; i < s.length; i++) {
					if (s.options[i].innerHTML == this.innerHTML) {
						s.selectedIndex = i;
						h.innerHTML = this.innerHTML;
						valueSelect = s.options[i].value;
						indexInner = i - 1;
						y = this.parentNode.getElementsByClassName("same-as-selected");
						for (k = 0; k < y.length; k++) {
						y[k].removeAttribute("class");
						}
						this.setAttribute("class", "same-as-selected");
						break;
					}
				}
				h.click();
				
				var indexOuter,
					targetID = e.target.parentNode.parentNode.id;

				if (targetID === optionID.idPhoto) {
					indexOuter = 0;
				} else if (targetID === optionID.idVideo) {
					indexOuter = 1;
				} else {
					indexOuter = 2;
				}
				
				for (var i = 0; i < elSelect.length; i++) {
					idEl = elSelect[i].id;
					if (targetID === idEl) {
						if (i !== lastSelect) {
							elSelect[lastSelect].classList.remove('active');
							elContent[lastSelect].classList.remove('active');
							elSelect[i].classList.add('active');
							elContent[i].classList.add('active');
							lastSelect = i;
						}
					}
				}

				for (var i = 0; i < elSubCat[indexOuter].length; i++) {
					elSubCat[indexOuter][i].classList.remove('current');
				}
				
				elSubCat[indexOuter][indexInner].classList.add('current');
				refresh_handler();
			});
			b.appendChild(c);
		}
		x[i].appendChild(b);
		a.addEventListener("click", function(e) {
			/*when the select box is clicked, close any other select boxes,
			and open/close the current select box:*/
			e.stopPropagation();
			closeAllSelect(this);
			this.nextSibling.classList.toggle("select-hide");
			this.classList.toggle("select-arrow-active");
		});
	}
	
	elSelect[lastSelect].classList.add('active');
	elContent[lastSelect].classList.add('active');
}

// Create contact page custom select
function customSelect() {
	var x, i, j, selElmnt, a, b, c;
	/*look for any elements with the class "custom-select":*/
	x = document.getElementsByClassName("custom-select");
	for (i = 0; i < x.length; i++) {
		selElmnt = x[i].getElementsByTagName("select")[0];
		/*for each element, create a new DIV that will act as the selected item:*/
		a = document.createElement("DIV");
		a.setAttribute("class", "select-selected");
		a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
		x[i].appendChild(a);
		/*for each element, create a new DIV that will contain the option list:*/
		b = document.createElement("DIV");
		b.setAttribute("class", "select-items select-hide");
		for (j = 1; j < selElmnt.length; j++) {
			/*for each option in the original select element,
			create a new DIV that will act as an option item:*/
			c = document.createElement("DIV");
			c.innerHTML = selElmnt.options[j].innerHTML;
			c.addEventListener("click", function(e) {
				/*when an item is clicked, update the original select box,
				and the selected item:*/
				var y, i, k, s, h;
				s = this.parentNode.parentNode.getElementsByTagName("select")[0];
				h = this.parentNode.previousSibling;
				for (i = 0; i < s.length; i++) {
					if (s.options[i].innerHTML == this.innerHTML) {
							s.selectedIndex = i;
							h.innerHTML = this.innerHTML;
							y = this.parentNode.getElementsByClassName("same-as-selected");
						for (k = 0; k < y.length; k++) {
							y[k].removeAttribute("class");
						}
						this.setAttribute("class", "same-as-selected");
						break;
					}
				}
				h.click();
			});
			b.appendChild(c);
		}
		x[i].appendChild(b);
		a.addEventListener("click", function(e) {
			/*when the select box is clicked, close any other select boxes,
			and open/close the current select box:*/
			e.stopPropagation();
			closeAllSelect(this);
			this.nextSibling.classList.toggle("select-hide");
			this.classList.toggle("select-arrow-active");
		});
	}
}

// Close custom select options
function closeAllSelect(elmnt) {
	/*a function that will close all select boxes in the document,
	except the current select box:*/
	var x, y, i, arrNo = [];
	x = document.getElementsByClassName("select-items");
	y = document.getElementsByClassName("select-selected");
	for (i = 0; i < y.length; i++) {
		if (elmnt == y[i]) {
			arrNo.push(i)
		} else {
			y[i].classList.remove("select-arrow-active");
		}
	}
	for (i = 0; i < x.length; i++) {
		if (arrNo.indexOf(i)) {
			x[i].classList.add("select-hide");
		}
	}
}

// General Popup
app.popup = function (setting) {
	'use strict';
	
	var body = document.body,
		buttonsOpenPopup = document.querySelectorAll(setting.buttonsOpen),
		buttonClosePopup = document.getElementById(setting.idButtonClose),
		idPopup = document.getElementById(setting.idPopup),
		wrapperIdPopup = document.querySelector('#' + setting.idPopup + ' ' + setting.bgPopup),
		totalButtons = buttonsOpenPopup.length,
		publicAPI = {};
	
	var _openPopup = function () {
		body.classList.add('overflow-hidden');
		idPopup.classList.add('show');
		setTimeout(function () {
			idPopup.classList.add('open');
		}, 100);
		if (!!setting.external) {
			setting.external();
		}
	};
	
	var _closePopup = function () {
		body.classList.remove('overflow-hidden');
		idPopup.classList.remove('open');
		setTimeout(function () {
			idPopup.classList.remove('show');
		}, 800);
	};
	
	var destroyPopup = function () {
		for (var i = 0; i < totalButtons; i++) {
			buttonsOpenPopup[i].removeEventListener('click', _openPopup, false);
		}
		
		buttonClosePopup.removeEventListener('click', _closePopup, false);
		wrapperIdPopup.removeEventListener('click', _closePopup, false);
		delete publicAPI.destroy;
	};
	
	for (var i = 0; i < totalButtons; i++) {
		buttonsOpenPopup[i].addEventListener('click', _openPopup, false);
	}
	
	buttonClosePopup.addEventListener('click', _closePopup, false);
	wrapperIdPopup.addEventListener('click', _closePopup, false);
	publicAPI.destroy = destroyPopup;
	return publicAPI;
};



function resizeHeaderOnScroll() {
  var distanceY = window.pageYOffset || document.documentElement.scrollTop,
	  hide = 150,
	  shrinkOn = 200,
	  headerEl = document.getElementById('header');
  
  if (distanceY > hide) {
    headerEl.classList.add("hide");
  } else {
    headerEl.classList.remove("hide");
  }
  if (distanceY > shrinkOn) {
    headerEl.classList.add("smaller");
  } else {
    headerEl.classList.remove("smaller");
  }
}
